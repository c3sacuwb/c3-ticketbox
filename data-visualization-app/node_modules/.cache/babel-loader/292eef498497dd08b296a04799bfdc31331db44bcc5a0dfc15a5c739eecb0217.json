{"ast":null,"code":"/*!\n * Chart.js v4.2.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing'\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height1 = chartArea.h * weight;\n      const width1 = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n      }\n      stack.start = x;\n      stack.placed += height1;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  active = false;\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID1 = Object.keys(position)[0];\n      const value1 = position[positionAxisID1];\n      titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret1 = this._getYAxisLabelAlignment(tl);\n      textAlign = ret1.textAlign;\n      x = ret1.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._each('register', args);\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._each('unregister', args);\n  }\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._each('register', args, this.controllers);\n  }\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    this._each('register', args, this.elements);\n  }\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this._each('register', args, this.plugins);\n  }\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i1 = 0; i1 < local.length; i1++) {\n    const plugin = local[i1];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n  id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n  if (id) {\n    return id;\n  }\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.2.1\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getDatasetArea(meta) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {\n      this._updateDataset(i1, isFunction(mode) ? mode({\n        datasetIndex: i1\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  static id = 'point';\n  /**\n  * @type {any}\n  */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox1 of hitboxes) {\n        if (hitbox1.col !== col) {\n          col = hitbox1.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox1.top = top;\n        hitbox1.left += this.left + padding;\n        hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n        top += hitbox1.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  static positioners = positioners;\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign,\n      left,\n      top,\n      right,\n      bottom\n    } = scale._pointLabelItems[i];\n    const {\n      backdropColor\n    } = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["r","requestAnimFrame","a","resolve","e","effects","c","color","i","isObject","d","defaults","b","isArray","v","valueOrDefault","u","unlistenArrayEvents","l","listenArrayEvents","f","resolveObjectKey","g","isNumberFinite","h","defined","s","sign","j","createContext","k","isNullOrUndef","_","_arrayUnique","t","toRadians","m","toPercentage","n","toDimension","T","TAU","o","formatNumber","p","_angleBetween","H","HALF_PI","P","PI","q","_getStartAndCountOfVisiblePoints","w","_scaleRangesChanged","x","isNumber","y","_parseObjectDataRadialScale","z","getRelativePosition","A","_rlookupByKey","B","_lookupByKey","C","_isPointInArea","D","getAngleFromPoint","E","toPadding","F","each","G","getMaximumSize","I","_getParentNode","J","readUsedSize","K","supportsEventListenerOptions","L","throttled","M","_isDomSupported","N","_factorize","O","finiteOrDefault","Q","callback","R","_addGrace","S","_limitValue","U","toDegrees","V","_measureText","W","_int16Range","X","_alignPixel","Y","clipArea","Z","renderText","$","unclipArea","a0","toFont","a1","_toLeftRightCenter","a2","_alignStartEnd","a3","overrides","a4","merge","a5","_capitalize","a6","descriptors","a7","isFunction","a8","_attachContext","a9","_createResolver","aa","_descriptors","ab","mergeIf","ac","uid","ad","debounce","ae","retinaScale","af","clearCanvas","ag","setsEqual","ah","_elementsEqual","ai","_isClickEvent","aj","_isBetween","ak","_readValueToProps","al","_updateBezierControlPoints","am","_computeSegments","an","_boundSegments","ao","_steppedInterpolation","ap","_bezierInterpolation","aq","_pointInLine","ar","_steppedLineTo","as","_bezierCurveTo","at","drawPoint","au","addRoundedRectPath","av","toTRBL","aw","toTRBLCorners","ax","_boundSegment","ay","_normalizeAngle","az","getRtlAdapter","aA","overrideTextDirection","aB","_textX","aC","restoreTextDirection","aD","drawPointLegend","aE","distanceBetweenPoints","aF","noop","aG","_setMinAndMaxByKey","aH","niceNum","aI","almostWhole","aJ","almostEquals","aK","_decimalPlaces","aL","Ticks","aM","log10","aN","_longestText","aO","_filterBetween","aP","_lookup","Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","call","window","_update","arguments","length","Date","now","remaining","running","items","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","animation","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","top","right","bottom","left","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","sort","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","setInflateAmount","_ref","inflateAmount","BarController","grouped","numbers","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","calcMin","maxX","maxY","minX","minY","DoughnutController","animateRotate","animateScale","spacing","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_datasetIndex","_decimated","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","controllers","__proto__","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","getProps","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","height1","width1","addBox","_layers","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","eventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","lines","lineHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","positionAxisID1","value1","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","title","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","valueAt","idx","pixel","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","ret1","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","_typedRegistries","_len","_key","_each","_len2","_key2","addControllers","_len3","_key3","_len4","_key4","addPlugins","_len5","_key5","addScales","_len6","_key6","getController","_get","getPlugin","getScale","removeControllers","_len7","_key7","removeElements","_len8","_key8","removePlugins","_len9","_key9","removeScales","_len10","_key10","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","i1","getOpts","_ref2","pluginOpts","_ref3","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","subResolver","descriptorDefaults","resolverCache","hasFunction","isScriptable","isIndexable","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","ilen1","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_ref4","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","pCenter1","innerMidAdjustedAngle","pCenter2","p8","pCenter3","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","tension","cubicInterpolationMode","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","interpolate","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","parseBorderRadius","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","containsColorsDefinition","plugin_colors","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_ref5","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","hitbox1","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","yBoxTop","xBoxLeft","fillText","strikethrough","textDirection","textWidth","setWidth","realX","fontLineHeight","calculateLegendItemHeight","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","_ref6","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","Colors","Decimation","Filler","SubTitle","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","_ref7","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","formatters","numeric","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","_ref8","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables","_adapters"],"sources":["C:/Users/Eli/OneDrive/Desktop/C3/data-visualization-app/node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.2.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing'\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height1 = chartArea.h * weight;\n            const width1 = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n            }\n            stack.start = x;\n            stack.placed += height1;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    active = false;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n    let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID1 = Object.keys(position)[0];\n            const value1 = position[positionAxisID1];\n            titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel = label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret1 = this._getYAxisLabelAlignment(tl);\n            textAlign = ret1.textAlign;\n            x = ret1.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i1 = 0; i1 < local.length; i1++){\n        const plugin = local[i1];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, scaleOptions) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n    id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n    if (id) {\n        return id;\n    }\n    throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.2.1\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getDatasetArea(meta) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: xScale.left,\n            right: xScale.right,\n            top: yScale.top,\n            bottom: yScale.bottom\n        };\n    }\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1){\n            this._updateDataset(i1, isFunction(mode) ? mode({\n                datasetIndex: i1\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta) || this.chartArea;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = this.options.spacing / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox1 of hitboxes){\n                if (hitbox1.col !== col) {\n                    col = hitbox1.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox1.top = top;\n                hitbox1.left += this.left + padding;\n                hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n                top += hitbox1.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColors = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.fillStyle = labelColors.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.setLineDash(labelColors.borderDash || []);\n            ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n            const borderRadius = toTRBLCorners(labelColors.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        ticks.push({\n            value: Math.round((niceMin + j * spacing) * factor) / factor\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const extra = getTickBackdropHeight(opts) / 2;\n    const outerDistance = scale.drawingArea;\n    const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n        const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n        const size = labelSizes[i];\n        const y = yForAngle(pointLabelPosition.y, size.h, angle);\n        const textAlign = getTextAlignForAngle(angle);\n        const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n        items.push({\n            x: pointLabelPosition.x,\n            y,\n            textAlign,\n            left,\n            top: y,\n            right: left + size.w,\n            bottom: y + size.h\n        });\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign , left , top , right , bottom  } = scale._pointLabelItems[i];\n        const { backdropColor  } = optsAtIndex;\n        if (!isNullOrUndef(backdropColor)) {\n            const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n            const padding = toPadding(optsAtIndex.backdropPadding);\n            ctx.fillStyle = backdropColor;\n            const backdropLeft = left - padding.left;\n            const backdropTop = top - padding.top;\n            const backdropWidth = right - left + padding.width;\n            const backdropHeight = bottom - top + padding.height;\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: backdropLeft,\n                    y: backdropTop,\n                    w: backdropWidth,\n                    h: backdropHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n            }\n        }\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort((a, b)=>a - b).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}